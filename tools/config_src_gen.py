#!/usr/bin/env python3
import sys
import json


gen_stub = \
"""/*
    ========================================================================================
     THIS CODE HAS BEEN AUTO-GENERATED BY THE CONFIG_SRC_GEN PYTHON SCRIPT.

        *~*~*~* DO NOT MODIFY THIS UNLESS YOU KNOW PRECISELY WHAT YOU ARE DOING. *~*~*~*


    @#@#@ PROJECT LICENSE @#@#@

    MIT License

    Copyright (c) 2025 Zack Puhl <github@xmit.xyz>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    ========================================================================================
*/

"""


def rgba_to_struct(input):
    r = input[0:2]
    g = input[2:4]
    b = input[4:6]
    a = input[6:8]
    return f"{{ 0x{r}, 0x{g}, 0x{b}, 0x{a} }}"


if len(sys.argv) < 3:
    sys.exit(f"USAGE: {sys.argv[0]} {{json-config}} {{generation-dir}}")

in_json = f"{sys.argv[1]}"

# NOTE: DO NOT CHANGE. These names must be synced with CONFIC_C and IC_OPTS_H in the Makefile.
out_conf = f"{sys.argv[2]}/config.c"
out_opts = f"{sys.argv[2]}/flex_ic_opts.h"

print(f"Processing JSON configuration at '{in_json}'...")

with open(in_json, 'r') as in_conf:
    conf_dict = json.load(in_conf)

print(conf_dict)

with open(out_opts, 'w') as out_h:
    out_h.write(gen_stub)
    out_h.write(
f"""
#ifndef FLEX_IC_OPTS_H
#define FLEX_IC_OPTS_H


/* Virtual CAN interface name. */
#define IC_OPT_CAN_IF_NAME              "{conf_dict['can']['interface_name']}"

/*
 * Enables O(1) [fast] lookup of message IDs, but requires MUCH higher RAM consumption.
 *  This option should be set to 0 for systems with reduced RAM where there is a wide
 *  spread of CAN message ID values. When message ID values are highly localized, the
 *  memory consumption difference is negligible.
 */
#define IC_OPT_ID_MAPPING               {0 if not conf_dict['can']['use_fast_id_mapping'] else 1}

/*
 * Define background gradient colors.
 *  If the background is static (i.e., a non-gradient), use the top-left color value.
 */
#define IC_OPT_BG_STATIC                {1 if not conf_dict['background']['uses_gradient'] else 0}
#define IC_OPT_BG_TOP_LEFT_RGBA         {rgba_to_struct(conf_dict['background']['colors']['top_left'])}
#define IC_OPT_BG_BOTTOM_LEFT_RGBA      {rgba_to_struct(conf_dict['background']['colors']['bottom_left'])}
#define IC_OPT_BG_TOP_RIGHT_RGBA        {rgba_to_struct(conf_dict['background']['colors']['top_right'])}
#define IC_OPT_BG_BOTTOM_RIGHT_RGBA     {rgba_to_struct(conf_dict['background']['colors']['bottom_right'])}

/* The FPS limit to use when rendering the IC. */
#define IC_OPT_FPS_LIMIT                {conf_dict['fps_limit']}

/* Whether to use full-screen mode when rendering (note: ignores SCREEN_WIDTH/HEIGHT). */
#define IC_OPT_FULL_SCREEN              {0 if not conf_dict['full_screen'] else 1}

/* The title of the GUI window when displayed in a desktop environment. */
#define IC_OPT_GUI_TITLE                "{conf_dict['window_title']}"
/* GUI screen width */
#define IC_OPT_SCREEN_WIDTH             {conf_dict['dimensions']['width']}
/* GUI screen height */
#define IC_OPT_SCREEN_HEIGHT            {conf_dict['dimensions']['height']}

/* If set, disables render-time logging, even when IC_DEBUG is on. */
#define IC_OPT_DISABLE_RENDER_TIME      {0 if not conf_dict['debug']['disable_render_time_reporting'] else 1}

/* If set, disables received CAN message logging, even when IC_DEBUG is on. */
#define IC_OPT_DISABLE_CAN_DETAILS      {0 if not conf_dict['debug']['disable_can_message_details'] else 1}    


/*
 * Whether to enable support for CAN FD or Extended (64-byte) data packets.
 *  Note that CAN buses which aren't sending frames with data over 8 bytes in
 *  length will be WASTING RAM if this option is enabled.
 */
#define IC_OPT_CAN_FD_EXTENDED          {0 if not conf_dict['can']['enable_can_fd'] else 1}

/*
 * No standard library. You should use this if the platform you're running on isn't running
 *  a basic Linux version. BEWARE: you will have to implement all STDLIB calls yourself and
 *  link them to the resulting executable!
 */
#define IC_OPT_NOSTDLIB                 {0 if conf_dict['use_stdlib'] else 1}

/*
 * Defines the symbol name of a one-time splash screen hook that displays a logo or animation
 *  when the application first starts. This can be defined in its own file under the 'custom'
 *  source directory.
 *
 * The expected function prototype to be used for this is:
 * ```
 * typedef void (*_func__renderer_loading_hook)(const renderer_t *self);
 * ```
 */
{"#undef IC_OPT_LOADING_HOOK_NAME" if not conf_dict['loading_hook_func_name'] else f"#define IC_OPT_LOADING_HOOK_NAME(x) {conf_dict['loading_hook_func_name']}(x)"}


#endif   /* FLEX_IC_OPTS_H */
"""
    )

with open(out_conf, 'w') as out_c:
    print("[truncated out-file]")
    out_c.write(gen_stub)
    out_c.write("const char *WIDGETS_CONFIGURATION =\n")

# Generate the program-specific widgets config string.
for widget in conf_dict['widgets']:
    can_signal_names = ":".join([f"{widget['can_message_name']}_{x}" for x in widget['can_signal_names']])
    widget_label = widget['label']
    type_and_skin = f"{widget['type']}:{(widget['skin'] or 'default')}"
    visible = "yes" if widget['visible'] else "no"
    orientation = f"{widget['position']['x']},{widget['position']['y']},{widget['dimensions']['width']},{widget['dimensions']['height']}"
    opts_str = "placeholder"   # TODO!

    with open(out_conf, 'a') as out_c:
        out_c.write(
            f"    \"{can_signal_names},{widget_label},{type_and_skin},{visible},{orientation},{widget['z_index']},"
            + f"{opts_str}\\n\"\n"
        )


with open(out_conf, 'a') as out_c:
    out_c.write(";")

print("Config source generation complete!\n")
exit(0)
