#!/usr/bin/env python3
import sys
import json


gen_stub = \
"""/*
    ========================================================================================
     THIS CODE HAS BEEN AUTO-GENERATED BY THE CONFIG_SRC_GEN PYTHON SCRIPT.

        *~*~*~* DO NOT MODIFY THIS UNLESS YOU KNOW PRECISELY WHAT YOU ARE DOING. *~*~*~*


    @#@#@ PROJECT LICENSE @#@#@

    MIT License

    Copyright (c) 2025 Zack Puhl <github@xmit.xyz>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    ========================================================================================
*/

"""


def rgba_to_struct(input):
    r = input[0:2]
    g = input[2:4]
    b = input[4:6]
    a = input[6:8]
    return f"{{ 0x{r}, 0x{g}, 0x{b}, 0x{a} }}"


if len(sys.argv) < 3:
    sys.exit(f"USAGE: {sys.argv[0]} {{json-config}} {{generation-dir}}")

in_json = f"{sys.argv[1]}"

# NOTE: DO NOT CHANGE. These names must be synced with CONFIC_C and IC_OPTS_H in the Makefile.
out_conf = f"{sys.argv[2]}/config.c"
out_opts = f"{sys.argv[2]}/flex_ic_opts.h"
out_stub = f"{sys.argv[2]}/flex_ic_opts_impl.c"

print(f"Processing JSON configuration at '{in_json}'...")

with open(in_json, 'r') as in_conf:
    conf_dict = json.load(in_conf)

print(conf_dict)


with (open(out_opts, 'w') as out_h):
    out_h.write(gen_stub)

    window = conf_dict['window']
    bg_type = window['background']['type']

    if bg_type.lower() not in ['color', 'asset']:
        print(f"ERROR: Background type must be either 'COLOR' or 'ASSET' - got {bg_type}.")
        sys.exit(2)

    bg = window['background'][bg_type.lower()]

    if not bg_type.lower() == 'asset' or not bg['path']:
        raw_bg_asset = ""
    else:
        with open(bg['path'], 'rb') as bg_asset:
            raw_buff = []
            nbytes = 1
            while nbytes != 0:
                block = bg_asset.read(1024)
                nbytes = len(block)
                raw_buff += block
            raw_bg_asset = "0x" + ", 0x".join(["{:02x}".format(x) for x in raw_buff])

    background_opts = \
        f"""        .is_gradient = {"true" if bg['is_gradient'] else "false"},
        .static_color = {rgba_to_struct(bg['static_color'])},
        {" ".join([f".gradient_{x} = {rgba_to_struct(bg['gradient'][x])}," for x in bg['gradient']])}""" \
            if bg_type.lower() == 'color' \
        else \
            f"""        .image_data = (uint8_t[{len(raw_buff)}]) {{ {raw_bg_asset} }},
        .image_size = {len(raw_buff)},
        .file_type = ".{bg['file_type']}",
        .fit_to_window = {"true" if bg['fit_to_window'] else "false"},
        .offset_x = {bg['offset_x'] if not bg['fit_to_window'] else 0},
        .offset_y = {bg['offset_y'] if not bg['fit_to_window'] else 0},
        .tint = {rgba_to_struct(bg['tint'])}"""

    out_h.write(
f"""
#ifndef FLEX_IC_OPTS_H
#define FLEX_IC_OPTS_H

#define IC_CONFIG_TYPES_ONLY
#include "flex_ic.h"


/********************************************************************/
/********************************************************************/
/********************************************************************/
/* Types and constants. */

/*
 * Enables O(1) [fast] lookup of message IDs, but requires much higher RAM consumption.
 *  This option should be set to 0 for systems with reduced RAM where there is a wide
 *  spread of CAN message ID values. When message ID values are highly localized, the
 *  memory consumption difference is negligible.
 */
#define IC_OPT_ID_MAPPING               {0 if not conf_dict['can']['use_fast_id_mapping'] else 1}

/* If set, disables render-time logging, even when IC_DEBUG is on. */
#define IC_OPT_DISABLE_RENDER_TIME      {0 if not conf_dict['debug']['disable_render_time_reporting'] else 1}

/* If set, disables received CAN message logging, even when IC_DEBUG is on. */
#define IC_OPT_DISABLE_CAN_DETAILS      {0 if not conf_dict['debug']['disable_can_message_details'] else 1}

/*
 * Whether to enable support for CAN FD or Extended (64-byte) data packets.
 *  Note that CAN buses which aren't sending frames with data over 8 bytes in
 *  length will be WASTING RAM if this option is enabled.
 */
#define IC_OPT_CAN_FD_EXTENDED          {0 if not conf_dict['can']['enable_can_fd'] else 1}

/*
 * No standard library. You should use this if the platform you're running on isn't running
 *  a basic Linux version. BEWARE: you will have to implement all STDLIB calls yourself and
 *  link them to the resulting executable!
 */
#define IC_OPT_NOSTDLIB                 {0 if conf_dict['compilation']['use_stdlib'] else 1}


/********************************************************************/
/********************************************************************/
/********************************************************************/
/* Declarations. */

/* Global configuration details. */
extern const ic_opts_t compile_time_ic_options;



/********************************************************************/
/********************************************************************/
/********************************************************************/
/* Definitions. Should only be included into a single translation unit with FLEX_IC_OPTS_IMPL. */

#ifdef FLEX_IC_OPTS_IMPL

const ic_opts_t compile_time_ic_options =
{{
    .window = {{
        .fps_limit = {window['fps_limit']},
        .dimensions = {{
            .x = {window['dimensions']['width']},
            .y = {window['dimensions']['height']}
        }},
        .full_screen = {"true" if window['full_screen'] else "false"},
        .title = "{window['title']}"
    }},
    .splash_hook_func = {window['splash_hook_func'] or "NULL"},
    .num_pages = {window['pages']},
    .can = {{
        .interface_name = "{conf_dict['can']['interface_name']}",
        .enable_fd = {"true" if conf_dict['can']['enable_can_fd'] else "false"}
    }},
    .background_type = {bg_type},
    .background_{bg_type.lower()} = {{
{background_opts}
    }},
}};

#endif   /* FLEX_IC_OPTS_IMPL */



#undef IC_CONFIG_TYPES_ONLY

#endif   /* FLEX_IC_OPTS_H */
"""
    )

with open(out_conf, 'w') as out_c:
    print("[truncated out-file]")
    out_c.write(gen_stub)
    out_c.write("const char *WIDGETS_CONFIGURATION =\n")

# Generate the program-specific widgets config string.
for widget in conf_dict['widgets']:
    can_signal_names = ":".join(widget['can_signal_names'])
    widget_label = widget['label']
    type_and_skin = f"{widget['type']}:{(widget['skin'] or 'default')}"
    visible = "yes" if widget['visible'] else "no"
    orientation = f"{widget['position']['x']},{widget['position']['y']},{widget['dimensions']['width']},{widget['dimensions']['height']},{widget['rotation']}"
    draw_outline = "yes" if widget['draw_boundary_outline'] else "no"

    opts_str = (";".join([f"{key}={widget['options'][key]}" for key in widget['options'].keys()]) or "EMPTY") + ";"

    with open(out_conf, 'a') as out_c:
        out_c.write(
            f"    \"{can_signal_names},{widget_label},{type_and_skin},{visible},{orientation},{widget['z_index']},{draw_outline},"
            + f"{opts_str}\\n\"\n"
        )


with open(out_conf, 'a') as out_c:
    out_c.write(";")

with open(out_stub, 'w') as out_s:
    out_s.write(gen_stub)
    out_s.write("""

/* Simply include the options header-only file with its implementation included. */
#define FLEX_IC_OPTS_IMPL
#include "flex_ic_opts.h"
"""
    )

print("Config source generation complete!\n")
exit(0)
